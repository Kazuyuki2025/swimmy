#!/usr/bin/env ruby

################################################################
# rbenv support:
# If this file is a symlink, and bound to a specific ruby
# version via rbenv (indicated by RBENV_VERSION),
# I want to resolve the symlink and re-exec
# the original executable respecting the .ruby_version
# which should indicate the right version.
#
if File.symlink?(__FILE__) and ENV["RBENV_VERSION"]
  ENV["RBENV_VERSION"] = nil
  shims_path = File.expand_path("shims", ENV["RBENV_ROOT"])
  ENV["PATH"] = shims_path + ":" + ENV["PATH"]
  exec(File.readlink(__FILE__), *ARGV)
end

gemfile = File.expand_path("../../Gemfile", __FILE__)

if File.exists?(gemfile + ".lock")
  ENV["BUNDLE_GEMFILE"] = gemfile
  require "bundler/setup"
end

Encoding.default_external = "UTF-8"
Thread.abort_on_exception = true

require "dotenv"
Dotenv.load
require "rubygems"
require "swimmy"
require "optparse"

################################################################
### Main thread

error_count = 0
env_names = %w(SLACK_API_TOKEN SWIMMY_SHEET_ID)

env_names.each do |env_name|
  unless ENV[env_name]
    STDERR.puts "Error: env #{env_name} is not set."
    error_count += 1
  end
end

exit 1 if error_count > 0

opt_hello = nil
option = OptionParser.new
option.on('--hello ITEM', 'say hello') { |v| opt_hello = v }
option.parse(ARGV)

# 以下のよう run を使うと client オブジェクトのの後始末をしてくれたり，
# 再接続を試みたりしてくれて，嬉しいのだけど，内部で実装されている再接
# 続の実装が少々問題．
#
#  1秒周期で走るのでうるさい．
#  特定の exception しかキャッチしない．
# Swimmy::App は，SlackRubyBot::Server を継承しているので，その中で
# run にモンキーパッチを当てるのが手っ取り早い．
#
# loop do
#   begin
#     Swimmy::App.new(token: ENV["SLACK_API_TOKEN"],
#                     spreadsheet: ENV["SWIMMY_SHEET_ID"]).run
#   rescue Exception => e
#     # Maybe network error, reconnect.
#     STDERR.puts "Error: #{e} (#{e.class})"
#     STDERR.puts "wait 10 secs"
#     sleep 10
#   end
# end
#
# 今のところ，とりあえず，当初の物に戻しておく↓
#

loop do
  begin
    bot = Swimmy::App.new(token: ENV["SLACK_API_TOKEN"],
                          spreadsheet: ENV["SWIMMY_SHEET_ID"], hello: opt_hello)
    bot.start!

  rescue Interrupt, SignalException => e
    # Interrupt: SIGINT (Control-c)
    # SignalException: Other signals
    #   https://docs.ruby-lang.org/ja/latest/class/SignalException.html
    # XXX: SIGUSR1 should restart the bot?
    STDERR.puts "Interrupted #{e.message} exiting..."
    bot.stop!
    exit!

  rescue Exception => e
    # Maybe network error, reconnect.
    STDERR.puts "Error: #{e} (#{e.class})"
    STDERR.puts "wait 20 secs"

    # XXX: cause ClientNotStartedError if bot is not started.
    bot.stop! rescue nil

    sleep 20
  end
end

# ただし，タイミングによっては，Swimmy::App のインスタンスが二重に生成
# されるような気がするので，要観察．
